[["index.html", "R guide 1 Preface", " R guide Ville Lang√©n 17.12.2024 1 Preface This short guide teaches you how to: install the R programming language on your Mac install the RStudio program on your Mac; you will use RStudio to run analyzes do easy statistical analyzes by writing R and R Markdown code Don‚Äôt worry if you didn‚Äôt understand much of the above. You do not need previous experience in statistical analysis. Disclaimer: I‚Äôm a pure clinician myself, and these pages reflect mainly my own experiences in running statistical analyzes. I present the concepts of statistics here only anecdotally. According to your needs, you can learn more about statistics and how to use R for instance by searching internet. This short guide is also available in Finnish: painamalla t√§t√§ linkki√§ p√§√§set t√§m√§n oppaan suomenkieliseen versioon. Thanks: My warmest thanks to Dr.¬†Joonatan Palmu for proofreading this R guide. Joonatan was also kind enough to write an appendix that deals with version control. I recommend that you familiarize yourself with the topic by reading the appendix right away after reading this short guide. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["r-language.html", "2 R language", " 2 R language R is a programming language that you can install on your computer for free and with which you can make not only statistical analyses but also graphs when preparing a scientific article. If the researcher‚Äôs choice is free, I dare to recommend nowadays that a novice researcher starts directly with R. Even if you already know e.g.¬†SAS or SPSS, it‚Äôs worth learning a little bit of R just to create graphs with it Advantages of R: free easy installation lightweight - takes up little space on the computer you can get help quickly and easily from the internet excellent for making graphs sufficient without other software for the analyzes of a standard dissertation In my opinion, R language is in its bare-bones format (the so-called Base-R) a bit difficult and non-human-readable. But when R code is made with an add-on, the so-called dplyr package, the code is very easy to read and write even for a beginner. This quick guide aims to do most everything with the dplyr package, which will be introduced more in detail later in this guide. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["r-markdown.html", "3 R Markdown", " 3 R Markdown Even this guide, which you are currently reading, was created using the R Markdown markup language. Text written in R Markdown is in an easy-to-read format, and you can still render (or more precisely: knit) it with one click of a button to the final format, which can be one of the following three: HTML (the markup language in which internet pages are written) PDF Microsoft Word document This guide advises right from the beginning to use R Markdown for analyzing and expressing data. R Markdown is easy to write with a free program called RStudio. This page you‚Äôre currently reading looks like this when written in R Markdown in RStudio (see the the image below, this goes a bit ‚Äúmeta‚Äù now): R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["workflow-when-coding-r.html", "4 Workflow when coding R", " 4 Workflow when coding R When working with R, the workflow often goes as follows: research data are prepared with ‚Äúbare‚Äù R scripts subsequently, the statistical analyzes are run directly in the R Markdown document The division of workflow into 1) R scripts and 2) R Markdown documents is of course completely free and individual - some do everything or almost everything directly in R Markdown documents, while others make only the actual statistical analyzes and visualizations in R Markdown. You may ask what is the use of analyzing data in an R Markdown document - I will answer as follows. Imagine a situation where you were to write a report for your colleagues using MS Word, with several tables and graphs alongside the text. If your supervisor notices an error and asks you to correct your data, you should insert the new tables and graphs one by one into a new MS Word document after the corrections. (Editor‚Äôs note: ‚ÄúBeen there, done that‚Ä¶ üò≠‚Äù) In an R Markdown document, there is no need for this: tables and graphs are automatically updated if you change something in your data. If you want, you can always ‚Äúcement‚Äù the text you wrote with R Markdown - complete with graphs and tables - and share it, for example, in MS Word format to your colleagues - or as a PDF. The third option is to do as I did with this text, which you‚Äôre probably reading right now in web form: I decided to translate it into HTML to turn this guide into a web page. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["installation-on-a-computer.html", "5 Installation on a computer 5.1 R language installation 5.2 Installation of RStudio", " 5 Installation on a computer You will need to install the following two installation packages on your Mac (if they are not already installed): R (install this first), and RStudio. Both are super easy to install, more on that below. 5.1 R language installation First, go to https://cran.r-project.org/. Click on ‚ÄúDownload R for macOS‚Äù. On the next page, click on the topmost download link. Install the downloaded package on your Mac. 5.2 Installation of RStudio Next, install RStudio on your machine: Go to https://www.rstudio.com/products/rstudio/download/. Click on the download link for the free ‚ÄúRStudio Desktop‚Äù (see image below) and install the program on your Mac. When you click on the link, the site will move you forward on the page (see image below) and remind you that R must first be installed, but you already did that. Press the link ‚ÄúDOWNLOAD RSTUDIO FOR MAC‚Äù, and a file called RStudio‚Ä¶ .dmg will be downloaded to your computer, install RStudio from that file on your computer. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["r-scripts.html", "6 R scripts 6.1 Basic view of RStudio 6.2 Creating an R script 6.3 Downloading of dplyr", " 6 R scripts R-scripts (text files containing code in R programming language) are similar to the ones in e.g.¬†Base SAS. They simply contain: Code in the R programming language Code documentation ‚Äì Note! Remember to document a lot so that you can understand your own code even after a long time! Documentation is done in R by adding # in front of your own comments. Below is an example of an R script (you don‚Äôt need to run this yourself): # The text after the hashtag is not code but rather your own commenting. # The next line, on the other hand, shows code of the R programming language: print(&quot;Hello World&quot;) Both R scripts and R Markdown documents are convenient to make with the RStudio program, which we will discuss next. 6.1 Basic view of RStudio RStudio has a variety of views and buttons, but you only need two to begin coding (see image below): The window in which you write your R script (the so-called source window) Console window 6.2 Creating an R script Create a new R script (file extension .R) by selecting File ‚Äì&gt; New File ‚Äì&gt; R Script from the RStudio menu (see image below): Save the empty R script you created by selecting File ‚Äì&gt; Save as‚Ä¶ and giving the file a name: my_data.R 6.3 Downloading of dplyr Data processing in R is greatly facilitated by the auxiliary package dplyr. Install it right away on your computer as follows (see the image below): in the lower left corner of RStudio, click on the tab Console. After the character &gt; that appears there, write the following command: install.packages(\"dplyr\") After that, click somewhere on the window of your document my_data.R. At the beginning of it, write the following code to download the dplyr package for use in this project: library(dplyr) Once you‚Äôve typed the line above, go somewhere on that line and press the key combination Cmd+Enter** on a Mac* (Cmd is the button that looks like a four-leaf clover). By doing this, you have just run that line and the functionalities of the dplyr package are available to you. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["example-dataset.html", "7 Example dataset 7.1 Editing data with dplyr 7.2 Recap of dplyr", " 7 Example dataset When learning R, you can make use of freely available example datasets. Let‚Äôs select a data set called Motor Trend Car Road Tests (abbreviation: mtcars), and start looking at and working with the variables in it. First, let‚Äôs create our own new dataset car_dataset, into which mtcars will be copied as is (see image below): ``car_dataset &lt;- mtcars'' SAS users are used to seeing the new dataset in a special SAS window in such a dataset creation situation. In RStudio you can get a similar view, so-called data view, by running the following command in the Console tab at the bottom left: View(car_dataset) After you have typed the View(car_dataset) command, the following view will open (image below): Take a look at the data view generated by the View command. You will notice the following points from a biostatistician‚Äôs point of view: The ‚Äúparticipants‚Äù in this case are car brands, and ‚Äúbiomarkers‚Äù (variables) are e.g.¬†horsepower, cylinders, etc. Note! Instead of the View() command, you can left-click on the ‚ÄúValue‚Äù column of the dataset, this does the same as the View() command (see the image below): 7.1 Editing data with dplyr Let‚Äôs simplify our dataset. We only keep the following four variables: mpg (describes fuel consumption) hp (describes horsepower) wt (describes mass) am (describes transmission type - automatic vs.¬†manual transmission) We will also give a new name to each of these variables. In addition to this, for practice: We exclude from our dataset all such cars that do not have at least 2 carburetors in use. If you don‚Äôt know what a carburetor is, it doesn‚Äôt matter (who would know, after all). This could equally well be ‚Äúthe participant has to have more than one kidney‚Äù in some other dataset. With the commands of the dplyr package, it is very easy to implement the things mentioned above. Write the following lines in your R script my_data.R. You can copy-paste them directly from below if you are reading the electronic version of this quick guide. See also the image below: car_dataset2 &lt;- car_dataset %&gt;% # Let&#39;s process the dataset car_dataset. filter(carb &gt; 1) %&gt;% # Keep only cars with more than 1 carburetor. mutate(fuel_cons = mpg, # New variables with new names are created horsepower = hp, # on these four lines mass = wt, # (actually, were making duplicates gear = am) %&gt;% # of the existing ones). select(fuel_cons, # Keep only the variables we created, horsepower, # destroy all others. mass, gear) Run the lines you entered: you can either paint the entire row with the mouse and run it with the key combination Command+Enter, or just go to the first line of that row and press Command+Enter. View the dataset you created by running the View command in the console, this time from the new dataset car_dataset2: View(car_dataset2) You will notice that the code you ran has worked as expected (see image below). 7.2 Recap of dplyr When using dplyr, the different commands (above: filter, mutate and select) are fed through the ‚Äúpipe‚Äù to be executed as a sequence of actions, and the following operator has to be in-between the commands: %&gt;%. Let‚Äôs recap how the pipe with dplyr worked (see also the image below): filter: we exclude something from our data (in this example we excluded cars with less than 2 carburetors). mutate: creation of new variables select: keep the variables that are mentioned, all others are destroyed %&gt;%-operator: with this the commands are piped as a sequence of actions &lt;- operator: this saves the data coming out of the pipe into a new dataset Just knowing these few commands makes it possible to assemble a complex dataset for your research. No need to memorize commands; you can start by copying these for yourself from e.g.¬†this instruction, and you can find a lot of additional examples online. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["missing-data.html", "8 Missing data? 8.1 Removal of missing data", " 8 Missing data? In the Methods section of scientific articles, it is most often described that all participants with missing data for any of the studied biomarkers were excluded before the analyzes. Let‚Äôs practice this next. Let‚Äôs create a couple of cars ourselves with dplyr‚Äôs commands in our dataset, but let‚Äôs do this so that these two cars have missing data. (Note! You don‚Äôt need to learn how to add a data row or change the row name from the following code at this stage - just copy the codes into your own script my_data.R.) # 1. # # Create a car with no mass defined. # Thus, the mass automatically gets the value NA in R (not applicable, i.e. missing data). # Store the entire new dataset as the dataset &quot;car_dataset3&quot;: car_dataset3 &lt;- car_dataset2 %&gt;% add_row(fuel_cons = 30.7, horsepower = 67, gear = 1) #Let&#39;s name the last line (i.e. the car) &quot;Lada&quot;: row.names(car_dataset3)[nrow(car_dataset3)] &lt;- &quot;–õ–∞–¥–∞&quot; # 2. # # The next car created will have the name &quot;Trabant&quot; that reflects the history of the GDR (DDR). # The mass will be given a clearly incorrect value of 0 kilograms. # The entire car dataset replaces the dataset &quot;car_dataset3&quot;: car_dataset3 &lt;- car_dataset3 %&gt;% add_row(fuel_cons = 34.6, horsepower = 23, mass = 0, gear = 1) row.names(car_dataset3)[nrow(car_dataset3)] &lt;- &quot;Trabant&quot; You can view the generated data again by typing the following command in the console: View(car_dataset3) You will see two new lines at the end of the car list with missing/incorrect data in the ‚Äúmass‚Äù column (only the last 6 lines are visible here): fuel_cons horsepower mass gear Ford Pantera L 15.8 264 3.17 1 Ferrari Dino 19.7 175 2.77 1 Maserati Bora 15.0 335 3.57 1 Volvo 142E 21.4 109 2.78 1 –õ–∞–¥–∞ 30.7 67 NA 1 Trabant 34.6 23 0.00 1 8.1 Removal of missing data Incorrect data can be deleted with the following steps: step: removal of rows containing NA (= not applicable) values step: removal of rows containing inadequate data (e.g.¬†mass cannot be 0 kg) In practice, when the filter command of the dplyr package is used, the implementation of the step 2 removes also the lines with NA values. Let‚Äôs demonstrate this with the following lines of code (you can write these in my_data.R script and select them with your mouse and run them by pressing Command+Enter): # 1st step: # # Let&#39;s show our data after the rows containing NA have been removed. # # Note! A new dataset is not created, because we do not command the data # to be copied into a new dataset - this would be done with the following # operator: &lt;- # # So the following code just sort of shows what kind of a dataset # we would get if we forwarded the code to a new dataset # using the &lt;- operator and giving the dataset some # name, e.g. &quot;car_dataset4&quot;: car_dataset3 %&gt;% na.omit As you can see below (only the last 6 lines are printed), the Lada car that contained the NA value would be lost, but the Trabant car would remain: ## fuel_cons horsepower mass gear ## Lotus Europa 30.4 113 1.513 1 ## Ford Pantera L 15.8 264 3.170 1 ## Ferrari Dino 19.7 175 2.770 1 ## Maserati Bora 15.0 335 3.570 1 ## Volvo 142E 21.4 109 2.780 1 ## Trabant 34.6 23 0.000 1 Now, let‚Äôs try the step 2, i.e.¬†remove the variables that don‚Äôt get some reasonable value, and see how it goes. Note! Again, we don‚Äôt save this run to any new dataset because we don‚Äôt use the &lt;- operator at the beginning (or end) of the piped commands. You can write the following lines in my_data.R script and run them again with Command+Enter: # 2nd step: # # Only such cars whose variables get adequate, reasonable values, are retained. # # Once again, we&#39;re not making a new dataset, we&#39;re rather just demonstrating what kind of # a dataset we would have if we were to create a new dataset: car_dataset3 %&gt;% filter(fuel_cons &gt; 0, horsepower &gt; 0, mass &gt; 0, gear %in% c(0,1)) You‚Äôll notice that the command in the step 2 removes directly both the Lada car with NA data and the Trabant car with a ‚Äúzero mass‚Äù (only the last 4 lines of the output shown here below): ## fuel_cons horsepower mass gear ## Ford Pantera L 15.8 264 3.17 1 ## Ferrari Dino 19.7 175 2.77 1 ## Maserati Bora 15.0 335 3.57 1 ## Volvo 142E 21.4 109 2.78 1 If and when we use the filter command of dplyr, our strategy is: We use directly the filter command of the step 2, and it removes both NAs and ‚Äúzero masses‚Äù At the same time, a new data set containing only adequate data (‚Äúcar_dataset4‚Äù) is created. Write the following lines in my_data.R script and run them with Command+Enter: # Delete any rows with either inadequate data or NA. # Save a complete dataset by the name &quot;car_dataset4&quot;: car_dataset4 &lt;- car_dataset3 %&gt;% filter(fuel_cons &gt; 0, horsepower &gt; 0, mass &gt; 0, gear %in% c(0,1)) When you view the dataset by typing the command View(car_dataset4) into the console, you will notice that the dataset has been cleaned of missing/incorrect data (only the last 4 lines are visible below): fuel_cons horsepower mass gear Ford Pantera L 15.8 264 3.17 1 Ferrari Dino 19.7 175 2.77 1 Maserati Bora 15.0 335 3.57 1 Volvo 142E 21.4 109 2.78 1 R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["destruction-of-datasets.html", "9 Destruction of datasets", " 9 Destruction of datasets When you type ls() in the console, you can see all the datasets stored in R‚Äôs memory - or, in the case of R, it‚Äôs better to talk about objects. The list looks roughly like this: [1] &quot;car_dataset&quot; &quot;car_dataset2&quot; &quot;car_dataset3&quot; &quot;car_dataset4&quot; Alternatively, you can view the list of objects in a specific tab of RStudio, see the image below: For the sake of practice, let‚Äôs destroy everything except the dataset ‚Äúcar_dataset‚Äù with the following command, which you can type directly into the console: rm(car_dataset2, car_dataset3, car_dataset4) When you re-run ls() in the console, you will only see the dataset ‚Äúcar_dataset‚Äù: [1] &quot;car_dataset&quot; Good to know: the command rm(list = ls()) destroys all objects from the R session memory (it clears the entire workspace). Good to know II: some experienced R users never destroy anything, but occasionally reset R and start from a clean slate. This is done by choosing ‚ÄúSession‚Äù -&gt; ‚ÄúRestart R‚Äù from the top menu of RStudio R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["transformation-variables.html", "10 Transformation variables", " 10 Transformation variables In Finnish, a new variable that is based on one or more existing variables is called a muunnosmuuttuja - the closest translation in English might be a combination variable or a transformation variable. An example could be a new variable hypertension, which would receive the value 1 if the subject‚Äôs office blood pressure was 140/90 mmHg or higher or if the subject was taking blood pressure medication, but otherwise the value 0. (In this specific example, the resulting variable would also be a binary or ‚Äúdummy‚Äù variable.) We already created such transformation variables with the command mutate, but we really only gave a new name to each of the new variables and did not change their values. For the sake of practice, let‚Äôs change the American units in our dataset to a European format. With the following command, take a look at the info of the dataset mtcars that we have been using (you can run the command either in the Console or in your R script): ?mtcars In the bottom right pane of RStudio, in the ‚ÄúHelp‚Äù tab, the following content will appear (here you can see a few lines from it): mtcars {datasets} R Documentation Motor Trend Car Road Tests Description The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973‚Äì74 models). Usage mtcars Format A data frame with 32 observations on 11 (numeric) variables. [, 1] mpg Miles/(US) gallon [, 2] cyl Number of cylinders [, 3] disp Displacement (cu.in.) [, 4] hp Gross horsepower In the Help tab, you‚Äôll notice that the dataset mtcars contains data entered in American units (miles, gallons, hp-type horsepower, etc.). We now want to change the American units to European ones. I found the following info with an open internet search: European fuel consumption (l/100 km) = 235.2 / American consumption units (mpg) European horsepower (PS) = American horsepower (hp) / 0.9863 European mass (kg) = American mass of the car (expressed in unit: 1000 lbs) * 453.6 Let‚Äôs run the code already run in chapter 7 one more time, but this time we will change the units to European. Let‚Äôs save the results into a new dataset ‚Äúcar_dataset5‚Äù: # Let&#39;s start from the beginning: let&#39;s load mtcars. # Note! Only when all the pipelined commands below have been run, # the dataset is saved into a new dataset called &quot;car_dataset5&quot;. car_dataset5 &lt;- mtcars %&gt;% # Only cars with more than 1 carburetor are selected. filter(carb &gt; 1) %&gt;% # Use the mutate command to change the American units to European ones, # give the variables new names. mutate(fuel_cons_eu = 235.2 / mpg, horsepower_eu = hp / 0.9863, mass_eu = wt * 453.6, gear = am) %&gt;% # With the Select command, only the new variables we created are # selected and thus preserved, all other variables will be destroyed. select(fuel_cons_eu, horsepower_eu, mass_eu, gear) Now view your data by typing in the console: View(car_dataset5) Now the ‚Äúbiomarkers‚Äù of cars look more familiar to a European eye (shown below are the first 4 lines): fuel_cons_eu horsepower_eu mass_eu gear Mazda RX4 11.20000 111.5279 1188.432 1 Mazda RX4 Wag 11.20000 111.5279 1304.100 1 Hornet Sportabout 12.57754 177.4308 1560.384 0 Duster 360 16.44755 248.4031 1619.352 0 R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["categorical-variables.html", "11 Categorical variables 11.1 as.factor command 11.2 tibble", " 11 Categorical variables A variable describing e.g.¬†fuel consumption (or the height of a research patient) on a continuous scale is a continuous variable. Contrary to this, the hypothetical variable hypertension, which was introduced in chapter 9 and received either the value 0 or 1, is a categorical variable. More specifically, such dichotomous or binary variables, receiving most often either 0 or 1 as their values, are called dummy variables. It is generally wise to tell R which of your variables are categorical variables so that R doesn‚Äôt mistakenly treat them as continuous variables in any analyses. In R, categorical variables should be saved as factor type. This is very easy. You can view your data by typing the following command in the Console: car_dataset5 Even a quick glance at the output (only 4 lines are shown below) will reveal you that gear is meant to be a categorical variable in these data. The other variables are clearly continuous variables. ## fuel_cons_eu horsepower_eu mass_eu gear ## Mazda RX4 11.20000 111.5279 1188.432 1 ## Mazda RX4 Wag 11.20000 111.5279 1304.100 1 ## Hornet Sportabout 12.57754 177.4308 1560.384 0 ## Duster 360 16.44755 248.4031 1619.352 0 11.1 as.factor command Let‚Äôs change the variable gear to factor, i.e.¬†turn it into a categorical variable. We will save it over itself - we will not create a new dataset. There are a few easy ways to do this. option: With Base-R, the following would be done: car_dataset5$gear &lt;- as.factor(car_dataset5$gear) Note that in the expression car_dataset5$gear we indicate with the dollar sign $ that we want to change only the variable gear from the dataset car_dataset5 into factor. option is to do the same thing using dplyr: car_dataset5 &lt;- car_dataset5 %&gt;% mutate(gear = as.factor(gear)) Run either of the methods mentioned above. If you now look at your data again by typing the following command in the Console, you will not really see any difference from before (only 4 lines shown here): car_dataset5 ## fuel_cons_eu horsepower_eu mass_eu gear ## Mazda RX4 11.20000 111.5279 1188.432 1 ## Mazda RX4 Wag 11.20000 111.5279 1304.100 1 ## Hornet Sportabout 12.57754 177.4308 1560.384 0 ## Duster 360 16.44755 248.4031 1619.352 0 Indeed, it is problematic that you can‚Äôt see in that output if R knows whether the variables are continuous or categorical. tibble comes to the rescue. tibble is an improved version of the Base-R‚Äôs ‚Äúdataframe‚Äù (in the previous examples, ‚Äúcar_dataset‚Äù, ‚Äúcar_dataset2‚Äù etc. were in Base-R format). At this point, tou don‚Äôt need to understand anything about data frames or why tibble is a better format - just take my word for it. 11.2 tibble Let‚Äôs change our dataset ‚Äúcar_dataset5‚Äù into a tibble. Let‚Äôs save the new data set as ‚Äúcar_dataset6‚Äù. At the same time, we are making another important correction. So far, the rows in our dataset have been named after car brands, but naming rows in general is not recommended today. When we switch to the tibble format, line names are destroyed and replaced by line numbers. Car brands (or analogously: ‚Äúcode identifiers of participants‚Äù) will appear in the first column, which is a better practice. It works like this - and notice that the command is nowadays as_tibble and not as.tibble: car_dataset6 &lt;- as_tibble(car_dataset5, rownames = &quot;Car Brands&quot;) After that, when you type the following command into the console, you can easily see that R indeed knows that the variable gear is categorical (or, in R‚Äôs terms, a factor): car_dataset6 Below you can see 4 lines of data (see also the image below): ## # A tibble: 4 √ó 5 ## `Car Brands` fuel_cons_eu horsepower_eu mass_eu gear ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 Mazda RX4 11.2 112. 1188. 1 ## 2 Mazda RX4 Wag 11.2 112. 1304. 1 ## 3 Hornet Sportabout 12.6 177. 1560. 0 ## 4 Duster 360 16.4 248. 1619. 0 R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["code-for-example-data.html", "12 Code for example data", " 12 Code for example data Below you can see pretty much all of the example data we have worked on thus far. In the next chapter, we will do analyses of these data in an R Markdown document. If you fell off the wagon at some point, you can copy-paste the entire example data below into RStudio as follows: In RStudio, click from the top menu on File ‚Äì&gt; New File ‚Äì&gt; R Script, paste the example data below into that script and save (Save As‚Ä¶) into an R script with the name my_data.R. my_data.R will be downloaded as the source file of our R Markdown document in the next chapter. Note! If you don‚Äôt copy-paste lines from here, check before moving to the next chapter that there are no View() commands in your R script my_data.R, as they will mess up the ‚Äúknitting‚Äù (or converting) phase of the R Markdown document in the future. I have checked that there are no View() commands in the text below, so the code below is bullet-proof. # Copy-paste everything below and save it in an R script names my_data.R # Load dplyr: library(dplyr) # Load mtcart into a new dataset: car_dataset &lt;- mtcars # Process your dataset with dplyr&#39;s commands: car_dataset2 &lt;- car_dataset %&gt;% # Let&#39;s process the dataset car_dataset. filter(carb &gt; 1) %&gt;% # Keep only cars with more than 1 carburetor. mutate(fuel_cons = mpg, # New variables with new names are created horsepower = hp, # on these four lines mass = wt, # (actually, were making duplicates gear = am) %&gt;% # of the existing ones). select(fuel_cons, # Keep only the variables we created, horsepower, # destroy all others. mass, gear) # Create &quot;broken data&quot; and fix it: # 1. # # Create a car with no mass defined. # Thus, the mass automatically gets the value NA in R (not applicable, i.e. missing data). # Store the entire new dataset as the dataset &quot;car_dataset3&quot;: car_dataset3 &lt;- car_dataset2 %&gt;% add_row(fuel_cons = 30.7, horsepower = 67, gear = 1) #Let&#39;s name the last line (i.e. the car) &quot;Lada&quot;: row.names(car_dataset3)[nrow(car_dataset3)] &lt;- &quot;–õ–∞–¥–∞&quot; # 2. # # The next car created will have the name &quot;Trabant&quot; that reflects the history of the GDR (DDR). # The mass will be given a clearly incorrect value of 0 kilograms. # The entire car dataset replaces the dataset &quot;car_dataset3&quot;: car_dataset3 &lt;- car_dataset3 %&gt;% add_row(fuel_cons = 34.6, horsepower = 23, mass = 0, gear = 1) row.names(car_dataset3)[nrow(car_dataset3)] &lt;- &quot;Trabant&quot; # Delete any rows with either inadequate data or NA. # Save a complete dataset by the name &quot;car_dataset4&quot;: car_dataset4 &lt;- car_dataset3 %&gt;% filter(fuel_cons &gt; 0, horsepower &gt; 0, mass &gt; 0, gear %in% c(0,1)) # Continue practicing with dplyr: # Let&#39;s start from the beginning: let&#39;s load mtcars. # Note! Only when all the pipelined commands below have been run, # the dataset is saved into a new dataset called &quot;car_dataset5&quot;. car_dataset5 &lt;- mtcars %&gt;% # Only cars with more than 1 carburetor are selected. filter(carb &gt; 1) %&gt;% # Use the mutate command to change the American units to European ones, # give the variables new names. mutate(fuel_cons_eu = 235.2 / mpg, horsepower_eu = hp / 0.9863, mass_eu = wt * 453.6, gear = am) %&gt;% # With the Select command, only the new variables we created are # selected and thus preserved, all other variables will be destroyed. select(fuel_cons_eu, horsepower_eu, mass_eu, gear) # Practice converting a variable to a factor form: car_dataset5 &lt;- car_dataset5 %&gt;% mutate(gear = as.factor(gear)) # Practice converting a data frame to a tibble: car_dataset6 &lt;- as_tibble(car_dataset5, rownames = &quot;Car Brands&quot;) R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["creating-r-markdown.html", "13 Creating R Markdown 13.1 Knit to final product 13.2 YAML header 13.3 Writing with R Markdown 13.4 ‚ÄúChunks‚Äù 13.5 First chunk", " 13 Creating R Markdown Create an R Markdown file (file extension .Rmd) by selecting File ‚Äì&gt; New File ‚Äì&gt; R Markdown from the RStudio menu (see image below). Next you will see a menu from which you can choose whether you are working on a web page (i.e.¬†an HTML file), a PDF or a Word file. The program will suggest you an HTML-type publication - accept this suggestion by selecting OK. This will create a new .Rmd file with the following sections (see also the image below): A YAML header at the very beginning of your document: it contains settings such as the final format of the report (HTML vs.¬†PDF vs.¬†Word file) Your free text written with markdown (e.g.¬†the text you are reading right was written in such Markdown) Special code ‚Äúchunks‚Äù, which can contain code from R and a few other programming languages 13.1 Knit to final product RStudio created a template R Markdown file for you with some content already. You can instantly convert (or ‚Äúknit‚Äù) the document into its final format. Do the following: First save your file by selecting File ‚Äì&gt; Save as‚Ä¶ and give the file any name you wish Then press the button ‚ÄúKnit‚Äù above your code (see image below) At this point, RStudio‚Äôs own web browser will open, and you will see the final result of the R Markdown document that you just converted to an HTML format. If everything went ok, you will see the view below: 13.2 YAML header The YAML header is isolated from the rest of the document between two lines of the following dashes ---. If you are a beginner, you don‚Äôt need to modify the YAML section at all. You can start using R Markdown directly with the YAML header that RStudio created for you when you selected File ‚Äì&gt; New File ‚Äì&gt; R Markdown from the RStudio menu. However, if you are excited to try adjusting YAML as well, you can familiarize yourself e.g.¬†with the online instructions in the book R Markdown: The Definitive Guide. You can easily add your name and date to your document with the instructions on that page. 13.3 Writing with R Markdown The R Markdown code itself is mostly plain text - just like writing with Word, Notepad, etc. Bold text can be made by putting two asterisks around the text: **Bold text**. You can create Italicized text by putting only one asterisk on either side of the text: ```Italicized text‚Äô‚Äô. 13.4 ‚ÄúChunks‚Äù In chunks, you can run statistical analyses and create tables and graphs with R code. Each chunk must have its own unique title, which you can invent freely; if you use the same title in two different chunks, R will hang the process and warn you of an error when you try to convert the document with the ‚ÄúKnit‚Äù button. Chunks are separated from free text - that is, from the markdown section - by writing three grave accents both before and after the code. The grave accent is particularly familiar to those who have studied French. If you don‚Äôt know how to type a grave accent with the keyboard, you can always copy-paste them from elsewhere, e.g.¬†from this quick guide you‚Äôre reading. Below is an example of a working chunk: ```{r fuel_consumption, echo=FALSE} plot(car_dataset6$horsepower_eu, car_dataset6$fuel_cons_eu) ``` When echo=FALSE shown above is included, the output of the command plot(car_dataset6$horsepower_eu, car_dataset6$fuel_cons_eu) is seen, but not the code itself plot(car_dataset6$horsepower_eu, car_dataset6$fuel_cons_eu) when our R Markdown document is converted into the final output. For more detailed information on how to use the echo option to control what is shown in the final output, you can read this text. 13.5 First chunk The first chunk is special: it should be named ‚Äúr setup‚Äù. In this first chunk, you adjust the settings that apply to all subsequent chunks. In addition, here you can download the source file (or sometimes several source files), where in this case the dataset ‚Äúcar_dataset6‚Äù that you‚Äôve created can be found. Make the following edits to the first chunk: Call the dplyr package with the library command Add my_data.R to the first chunk The first chunk should look like this: ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) library(dplyr) source(&quot;my_data.R&quot;) ``` R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["analyses-with-r-markdown.html", "14 Analyses with R Markdown 14.1 Viewing the dataset 14.2 Examining variables 14.3 Graphs 14.4 Linear regression", " 14 Analyses with R Markdown You can now start analyzing your data in your ‚Äúcar_dataset6‚Äù in R Markdown document. If you want, you can destroy text and chunks from RStudio‚Äôs template or write over them. However, be careful not to mess up the YAML header or the first ‚Äúr setup‚Äù chunk. 14.1 Viewing the dataset 14.1.1 head command We make use of the very useful command head which prints the first 6 rows of our data. We get a quick glance at our data and, if we want, we can share it forward in the form of R Markdown. You can e.g.¬†write ‚ÄúHere is an excerpt of a few rows of our finalized article data‚Äù. After that, you can hit an empty line with enter and write the next chunk, which must have 3 heavy accents at the beginning and at the end: ```{r head_of_our_data, echo=FALSE} head(car_dataset6) ``` Here is an excerpt of a few rows from our finished data in this article. ## # A tibble: 6 √ó 5 ## `Car Brands` fuel_cons_eu horsepower_eu mass_eu gear ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 Mazda RX4 11.2 112. 1188. 1 ## 2 Mazda RX4 Wag 11.2 112. 1304. 1 ## 3 Hornet Sportabout 12.6 177. 1560. 0 ## 4 Duster 360 16.4 248. 1619. 0 ## 5 Merc 240D 9.64 62.9 1447. 0 ## 6 Merc 230 10.3 96.3 1429. 0 While tibble is neat in many ways, I personally don‚Äôt like the way the decimal places in tibble-type datasets are printed. To remedy this and to beautify the output, the command kable comes to our help. 14.1.2 kable beautifies To make the output nicer to look at, add the command kable, which comes with the package knitr. You can install that package by issuing the following command in the console: install.packages(&quot;knitr&quot;) In addition to this, you should invoke knitr by adding it to the first chunk named r setup. After that, your first chunk will look like this: ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) library(dplyr) library(knitr) source(&quot;my_data.R&quot;) ``` After this you can use the kable command. Let‚Äôs pipe all the commands as follows: ```{r head_of_our_data_plus_kable, echo=FALSE} car_dataset6 %&gt;% head %&gt;% kable ``` You will now see a prettier output: Car Brands fuel_cons_eu horsepower_eu mass_eu gear Mazda RX4 11.200000 111.52793 1188.432 1 Mazda RX4 Wag 11.200000 111.52793 1304.100 1 Hornet Sportabout 12.577540 177.43080 1560.384 0 Duster 360 16.447552 248.40312 1619.352 0 Merc 240D 9.639344 62.86120 1446.984 0 Merc 230 10.315789 96.31958 1428.840 0 14.1.3 tail command The command tail does the same as head but from the other direction, i.e.¬†it shows the last 6 lines of the dataset. ```{r tail_of_our_data_plus_kable, echo=FALSE} car_dataset6 %&gt;% tail %&gt;% kable ``` Car Brands fuel_cons_eu horsepower_eu mass_eu gear Porsche 914-2 9.046154 92.26402 970.7040 1 Lotus Europa 7.736842 114.56960 686.2968 1 Ford Pantera L 14.886076 267.66704 1437.9120 1 Ferrari Dino 11.939086 177.43080 1256.4720 1 Maserati Bora 15.680000 339.65325 1619.3520 1 Volvo 142E 10.990654 110.51404 1261.0080 1 14.2 Examining variables 14.2.1 min, max, mean With the command summarise of dplyr, we can easily view e.g.¬†the minimum, maximum and mean values of the variables we want: ```{r mean_values, echo=FALSE} # Let&#39;s select our dataset &quot;car_dataset6&quot; for processing: car_dataset6 %&gt;% # Let&#39;s use the command summarise: summarise(fuel_cons_min = min(fuel_cons_eu), fuel_cons_max = max(fuel_cons_eu), fuel_cons_mean = mean(fuel_cons_eu)) %&gt;% # We prettify the output with kable: kable ``` fuel_cons_min fuel_cons_max fuel_cons_mean 7.736842 22.61538 13.60331 You can also print a specific statistic - for example, the mean - for several variables using the summarise_at command. You might want to write free text before the next code, e.g. Below you can see the mean values of the variables of the dataset ‚Äúcar_dataset6‚Äù. ```{r mean_values2, echo=FALSE} car_dataset6 %&gt;% # We use now the command summarise_at. The variables that we want # to look at have to be expressed in the following way: # c(&quot;variable1&quot;, &quot;variable2&quot;, &quot;variable3&quot;) # After these comes the chosen statistic: summarise_at(c(&quot;fuel_cons_eu&quot;, &quot;horsepower_eu&quot;, &quot;mass_eu&quot;), mean) %&gt;% # We prettify the output: kable ``` Below you can see the mean values of the variables of ‚Äúcar_dataset6‚Äù. fuel_cons_eu horsepower_eu mass_eu 13.60331 165.9536 1551.711 This analysis shows that the cars in our dataset are moderate gas guzzlers. 14.2.2 summary With the function summary() you get a summary of your entire dataset. ```{r summary, echo=FALSE} car_dataset6 %&gt;% summary %&gt;% kable() ``` Car Brands fuel_cons_eu horsepower_eu mass_eu gear Length:25 Min. : 7.737 Min. : 52.72 Min. : 686.3 0:16 Class :character 1st Qu.:11.200 1st Qu.:111.53 1st Qu.:1304.1 1: 9 Mode :character Median :13.213 Median :177.43 Median :1560.4 NA NA Mean :13.603 Mean :165.95 Mean :1551.7 NA NA 3rd Qu.:15.474 3rd Qu.:207.85 3rd Qu.:1714.6 NA NA Max. :22.615 Max. :339.65 Max. :2460.3 NA If you want, you can also run the summary command for each variable in your dataset separately. You can achieve this by ‚Äúlooping‚Äù the summary with a command called sapply. In this case, however, you cannot use kable, so the output is not so pretty. ```{r sapply2, echo=FALSE} car_dataset6 %&gt;% sapply(summary) ``` ## $`Car Brands` ## Length Class Mode ## 25 character character ## ## $fuel_cons_eu ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 7.737 11.200 13.213 13.603 15.474 22.615 ## ## $horsepower_eu ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 52.72 111.53 177.43 165.95 207.85 339.65 ## ## $mass_eu ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 686.3 1304.1 1560.4 1551.7 1714.6 2460.3 ## ## $gear ## 0 1 ## 16 9 There are several packages for R that allow you to get a more beautiful and versatile description of your dataset than the summary command is capable of. Next, one of these packages will be presented. 14.2.3 summarytools With the functions of the summarytools package, you can get beautiful and diverse presentations of your dataset. Installation is done by typing install.packages(\"summarytools\") into the console and pressing enter. 14.2.3.1 dfSummary dfSummary gives a very versatile representation of your entire dataset. See an example of the ‚Äúcar_dataset6‚Äù below. Run the following code: ```{r summarytools2, echo=FALSE, results=&quot;asis&quot;} # summarytools requires the attribute results=&quot;asis&quot; to show a pretty # output in R Markdown. library(summarytools) car_dataset6 %&gt;% dfSummary(varnumbers = FALSE, plain.ascii = FALSE, style = &quot;grid&quot;, graph.magnif = 0.75, max.distinct.values = 3, # I wrote the number 3 here # in order to not see exhaustive number # of cars in this example. valid.col = FALSE, tmp.img.dir = &quot;/tmp&quot;) ``` You will then see the following summary: Variable Stats / Values Freqs (% of Valid) Graph Missing Car Brands [character] 1. AMC Javelin 2. Cadillac Fleetwood 3. Camaro Z28 [ 22 others ] 1 ( 4.0%) 1 ( 4.0%) 1 ( 4.0%) 22 (88.0%) 0 (0.0%) fuel_cons_eu [numeric] Mean (sd) : 13.6 (3.8) min &lt; med &lt; max: 7.7 &lt; 13.2 &lt; 22.6 IQR (CV) : 4.3 (0.3) 20 distinct values 0 (0.0%) horsepower_eu [numeric] Mean (sd) : 166 (68.8) min &lt; med &lt; max: 52.7 &lt; 177.4 &lt; 339.7 IQR (CV) : 96.3 (0.4) 17 distinct values 0 (0.0%) mass_eu [numeric] Mean (sd) : 1551.7 (440.4) min &lt; med &lt; max: 686.3 &lt; 1560.4 &lt; 2460.3 IQR (CV) : 410.5 (0.3) 22 distinct values 0 (0.0%) gear [factor] 1. 0 2. 1 16 (64.0%) 9 (36.0%) 0 (0.0%) 14.2.3.2 descr The function descr of the summarytools package takes only continuous (numerical) variables from the dataset for processing and displays different statistics according to the user‚Äôs wishes. Look at the following examples. First example: ```{r descr, echo=FALSE, results=&quot;asis&quot;} library(summarytools) descr(car_dataset6, stats = &quot;common&quot;, transpose = TRUE, headings = FALSE) ``` We asked for ‚Äúcommon‚Äù identifiers - you can see what the descr command thinks they are from the table below. Note that R throws a warning above the table that only numeric variables made it into the analysis, which was already known: ## Non-numerical variable(s) ignored: Car Brands, gear ¬† Mean Std.Dev Min Median Max N.Valid Pct.Valid fuel_cons_eu 13.60 3.82 7.74 13.21 22.62 25.00 100.00 horsepower_eu 165.95 68.76 52.72 177.43 339.65 25.00 100.00 mass_eu 1551.71 440.39 686.30 1560.38 2460.33 25.00 100.00 In the second example, we define manually the statistics we want: ```{r descr2, echo=FALSE, results=&quot;asis&quot;} library(summarytools) descr(car_dataset6, stats = c(&quot;mean&quot;,&quot;sd&quot;,&quot;min&quot;,&quot;max&quot;), transpose = TRUE, headings = FALSE) ``` ## Non-numerical variable(s) ignored: Car Brands, gear ¬† Mean Std.Dev Min Max fuel_cons_eu 13.60 3.82 7.74 22.62 horsepower_eu 165.95 68.76 52.72 339.65 mass_eu 1551.71 440.39 686.30 2460.33 By typing ?descr in the console, you can find out more about all the statistics (the section ‚Äústats‚Äù of the Help) you can request from the descr function. 14.2.3.3 freq The function freq of the summarytools package is used to study the characteristics of categorical variables: n-numbers, percentages and cumulative frequency of categories. I‚Äôve tweaked the sample code below to make this function as similar to SAS‚Äôs great PROC FREQ as possible. ```{r freq, echo=FALSE, results=&quot;asis&quot;} library(summarytools) st_options(freq.cumul = TRUE, freq.totals = TRUE, freq.report.nas = FALSE, plain.ascii = FALSE, headings = FALSE) freq(car_dataset6$gear, style = &#39;rmarkdown&#39;, caption = &#39;Frequencies: car_dataset6$gear&#39;) ``` With the code shown above, we look at the identifiers of the categories (0 and 1) of the categorical variable ‚Äúgear‚Äù of ‚Äúcar_dataset6‚Äù. I only removed the titles for ‚Äúprinting reasons‚Äù related to the numbering of the chapters in this guide; for the same reason, I manually added the title (caption text). The table is shown here below: Frequencies: car_dataset6$gear ¬† Freq % % Cum. 0 16 64.00 64.00 1 9 36.00 100.00 Total 25 100.00 100.00 14.2.3.4 ctable The function ctable of the summarytools package can perform cross-tabulations somewhat in the same way as SAS‚Äôs PROC FREQ. For this exercise, we‚Äôll make a new categorical variable ‚Äúgasguzzler‚Äù: ```{r ctable, echo=FALSE, results=&#39;asis&#39;} library(summarytools) car_dataset6 %&gt;% mutate(gasguzzler = ifelse(fuel_cons_eu &lt; 13.2, 0, 1)) -&gt; car_dataset7 car_dataset7$gasguzzler &lt;- as.factor(car_dataset7$gasguzzler) ctable(x = car_dataset7$gear, y = car_dataset7$gasguzzler, prop = &#39;r&#39;, totals = T, headings = FALSE) ``` gasguzzler 0 1 Total gear 0 5 (31.2%) 11 (68.8%) 16 (100.0%) 1 7 (77.8%) 2 (22.2%) 9 (100.0%) Total 12 (48.0%) 13 (52.0%) 25 (100.0%) 14.2.4 questionr::freq Recently, instead of the function freq from the summarytools package, I have been using the function freq from the questionr package quite a lot. This has the following advantages: If you run the analysis in (or ‚Äúunder‚Äù) the chunk (by pressing the play button on the upper right of the chunk), the result of the analysis is shown in a nice, ‚Äúnon-ASCII-like‚Äù printout under the chunk. If you set ‚Äúpaged‚Äù as the format of the HTML file in the YAML section at the beginning of the document, the same pretty output of questionr::freq continues even in the HTML file, after pressing the button Knit. Disadvantages: You want see the name of the processed variable anywhere This can be remedied by writing something about the variable in question above the code chunk (for instance in the subheading of the R Markdown document) Below is a working example with YAML sections. --- title: Practicing the use of questionr::freq author: &quot;John Doe&quot; output: html_document: df_print: &quot;paged&quot; --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) ``` ## Frequency table of the categorical variable &quot;gear&quot; ```{r practicing questionr_freq, echo=FALSE} library(questionr) questionr::freq(car_dataset6$gear, total = T) ``` With the above code, you will get the following HTML output after knitting the R Markdown document: 14.2.5 table1 You should also consider installing the table1 package. Another equally good option is the package tableone. With both of these, a very simple command can generate a ‚ÄúTable 1. Characteristics‚Äù table for the article being worked on. You can install the table1 package by issuing the following command in the console: install.packages(&quot;table1&quot;) After that, you can try the package as follows: ```{r table1, echo=FALSE} library(table1) label(car_dataset6$fuel_cons_eu) &lt;- &quot;Fuel consumption&quot; label(car_dataset6$horsepower_eu) &lt;- &quot;Horse power&quot; label(car_dataset6$mass_eu) &lt;- &quot;Mass&quot; label(car_dataset6$gear) &lt;- &quot;Gear&quot; units(car_dataset6$fuel_cons_eu) &lt;- &quot;l/100 km&quot; units(car_dataset6$mass_eu) &lt;- &quot;kg&quot; table1(~ fuel_cons_eu + horsepower_eu + mass_eu + factor(gear), caption = &quot;Table 1. Characteristics&quot;, data=car_dataset6) ``` Table 1. Characteristics Overall(N=25) Fuel consumption (l/100 km) Mean (SD) 13.6 (3.82) Median [Min, Max] 13.2 [7.74, 22.6] Horse power Mean (SD) 166 (68.8) Median [Min, Max] 177 [52.7, 340] Mass (kg) Mean (SD) 1550 (440) Median [Min, Max] 1560 [686, 2460] factor(gear) 0 16 (64.0%) 1 9 (36.0%) 14.3 Graphs You can easily add graphs to your R Markdown document. Next, we‚Äôll look at Base-R‚Äôs plot command, followed by the versatile ggplot. 14.3.1 plot The command plot belongs to Base-R. Try the following code: ```{r fuel_consumption, echo=FALSE} plot(car_dataset6$horsepower_eu, car_dataset6$fuel_cons_eu) ``` 14.3.2 ggplot2 For even slightly more complex plots, I recommend that you consider installing the ggplot2 package by issuing the following command in the console: install.packages(&quot;ggplot2&quot;) After that, you can redo with ggplot2 the graph already presented above, and you can, for example, add a regression line as follows: ```{r fuel_cons_ggplot2, echo=FALSE, message = FALSE} # ggplot2 is somewhat &quot;talky&quot;, so I added the # option message = FALSE above; of course you can try # removing it. library(ggplot2) ggplot(car_dataset6, aes(horsepower_eu, fuel_cons_eu)) + geom_point() + geom_smooth(method=&#39;lm&#39;) # + theme_classic() # you can remove the above hashtag if you want a classic theme ``` If you don‚Äôt like background colors or colors in general in your graph, these can be adjusted endlessly and very precisely when using ggplot2. There are also ready-made various themes; if you want, you can try how theme_classic looks like by removing the hashtag symbol before it in the example code above. 14.4 Linear regression Above, we examined the connection between horse power and gas consumption with graphs. You can study the same set of questions numerically with linear regression. 14.4.1 Simple regression We start with the so-called simple linear regression: ```{r simple_linear_regression, echo=FALSE} # For the code to work, the expression &quot;data = .&quot; is required. which means that # that the data that came through the &quot;pipe&quot; is included in the regression mode car_dataset6 %&gt;% lm(fuel_cons_eu ~ horsepower_eu, data = .) %&gt;% summary() ``` ## ## Call: ## lm(formula = fuel_cons_eu ~ horsepower_eu, data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.7143 -1.4745 -0.2755 0.8574 7.3742 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.115144 1.477471 4.816 7.37e-05 *** ## horsepower_eu 0.039096 0.008249 4.739 8.91e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.779 on 23 degrees of freedom ## Multiple R-squared: 0.4941, Adjusted R-squared: 0.4721 ## F-statistic: 22.46 on 1 and 23 DF, p-value: 8.912e-05 Let‚Äôs take a look at the results. When examining the association of horse power with gas consumption, the slope turned out to be 0.039096 and the P-value was 8.91e-05 ***. So horse power seems to be related to gas consumption, at least when examined with simple linear regression. The output on the screen just looks unpretty when produced with the summary command of the Base-R. tidy will help us - more about that in the following. 14.4.2 tidy In the previous paragraph, we ran a simple linear regression and looked at the results with the summary command, but the output was esthetically not pleasing to the eye. To remedy this, you might want to install the package broom. The package in question comes with the command tidy, which can be used to print the results of the regression model in a beautiful way when kable is also put in the same pipe. You can install the package broom by running the following command in the console: install.packages(&quot;broom&quot;) You can then run the following code: ```{r simple_regression_tidy, echo=FALSE} # Note that you can also put the library(broom) command directly in your r setup chunk, # so it doesn&#39;t have to be repeated constantly: library(broom) car_dataset6 %&gt;% lm(fuel_cons_eu ~ horsepower_eu, data = .) %&gt;% tidy %&gt;% kable ``` As you can see below, tidy and kable work together to produce a prettier output that you can share to your colleagues: term estimate std.error statistic p.value (Intercept) 7.1151438 1.4774711 4.815758 7.37e-05 horsepower_eu 0.0390963 0.0082491 4.739457 8.91e-05 14.4.3 Multiple regression Let‚Äôs continue with the linear model but add mass and gear as covariates. In this case, we‚Äôre dealing with a multiple linear regression model. ```{r multiple_regression, echo=FALSE} library(broom) car_dataset6 %&gt;% lm(fuel_cons_eu ~ horsepower_eu + mass_eu + gear, data = .) %&gt;% tidy %&gt;% kable ``` term estimate std.error statistic p.value (Intercept) 0.8439313 2.0599787 0.4096796 0.6861899 horsepower_eu 0.0157904 0.0069578 2.2694621 0.0338970 mass_eu 0.0064374 0.0014619 4.4033854 0.0002477 gear1 0.4164721 1.0858710 0.3835373 0.7051768 Horsepower still seems to be related to gas consumption, but not as strongly anymore. Mass seems to be more related to gas consumption. Interestingly, gear doesn‚Äôt seem to be related to fuel consumption. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["afterword.html", "15 Afterword", " 15 Afterword We covered the basic building blocks above to create your dataset, how to look at the variables in it, do cross-tabulations and graphs and even regression analysis. You can copy-paste code from this quick guide into your own projects. The Internet is full of R guides, and you will no doubt want to familiarize yourself with them next. If and when coding with R sometimes leaves you feeling lost, you should ask help from Stack Overflow (SO). Creating a username there is free. If you can‚Äôt find an answer to your question by browsing SO, you can ask it yourself there. You will usually receive an answer within a few hours. The answers show the genius of experienced coders that is hard not to admire. And just like using R and RStudio, SO is completely free. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["appendix.html", "Appendix", " Appendix The appendix section has not yet been translated into English. However, you can try and read the appendix of the Finnish version of this guide with an automatic translation to English, as this feature is available in several web browsers nowadays. R guide by Ville Lang√©n is licensed under Attribution-ShareAlike 4.0 International "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
